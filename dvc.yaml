stages:
  prepare_data:
    cmd: poetry run data_split --random-state 42 --dev-split 0.15 --test-split 0.15 data/interim/annotations.jsonl tmp/train.jsonl tmp/dev.jsonl tmp/test.jsonl
    deps:
    - data/interim/annotations.jsonl
    - profile_extraction/util/main.py
    - profile_extraction/util/utils.py
    outs:
    - tmp/train.jsonl
    - tmp/dev.jsonl
    - tmp/test.jsonl

  prepare_text_corpus:
    cmd: poetry run create_text_corpus --random-state 42 --dev-split 0.1 --test-split 0.1 data/raw/all.jsonl emb/train/train_split_1 emb/valid.txt emb/test.txt
    deps:
    - data/raw/all.jsonl
    - profile_extraction/util/main.py
    - profile_extraction/util/utils.py
    outs:
    - emb/train/train_split_1
    - emb/valid.txt
    - emb/test.txt

  prepare_rule_based_pipeline:
    cmd: poetry run create_pattern_file tmp/train.jsonl tmp/dev.jsonl rule_based_pipeline_resources/patterns.jsonl
    deps:
    - tmp/train.jsonl
    outs:
    - rule_based_pipeline_resources/patterns.jsonl

  train_forward_lm:
    cmd: poetry run train_embeddings --forward emb/ language_model/forward
    deps:
    - emb/train/train_split_1
    - emb/valid.txt
    - emb/test.txt
    - profile_extraction/ner_model/train_embeddings.py
    outs:
    - language_model/forward/best-lm.pt
    - language_model/forward/training.log
    - language_model/forward/loss.txt

  train_backward_lm:
    cmd: poetry run train_embeddings --backward emb/ language_model/backward
    deps:
    - emb/train/train_split_1
    - emb/valid.txt
    - emb/test.txt
    - profile_extraction/ner_model/train_embeddings.py
    outs:
    - language_model/backward/best-lm.pt
    - language_model/backward/training.log
    - language_model/backward/loss.txt

  train_ner_model:
    cmd: poetry run train_model tmp model
    deps:
    - tmp/train.jsonl
    - tmp/dev.jsonl
    - tmp/test.jsonl
    - language_model/backward/best-lm.pt
    - language_model/forward/best-lm.pt
    - profile_extraction/ner_model/corpus.py
    - profile_extraction/ner_model/train.py
    outs:
    - model/best-model.pt
    - model/training.log
    - model/loss.tsv

  train_transformer_model:
    cmd: poetry run train_transformer tmp transformer_model
    deps:
    - tmp/train.jsonl
    - tmp/dev.jsonl
    - tmp/test.jsonl
    - profile_extraction/ner_model/corpus.py
    - profile_extraction/ner_model/train_transformer.py
    outs:
    - transformer_model/best-model.pt
    - transformer_model/training.log
    - transformer_model/loss.tsv

  ner_model_metrics:
    cmd: poetry run evaluate -m model/best-model.pt -d tmp/test.jsonl model/metrics.json
    deps:
    - model/best-model.pt
    - tmp/test.jsonl
    - profile_extraction/ner_model/evaluate.py
    metrics:
    - model/metrics.json

  transformer_model_metrics:
    cmd: poetry run evaluate -m transformer_model/best-model.pt -d tmp/test.jsonl transformer_model/metrics.json
    deps:
    - transformer_model/best-model.pt
    - tmp/test.jsonl
    - profile_extraction/ner_model/evaluate.py
    metrics:
    - transformer_model/metrics.json

  create_profiles_schwarzmarkt_4:
    cmd: create_profiles --model transformer_model/best-model.pt --chat data/raw/schwarzmarkt_4.json --output profiles/schwarzmarkt_4.json
    outs:
    - profiles/schwarzmarkt_4.json
    deps:
    - transformer_model/best-model.pt
    - data/raw/schwarzmarkt_4.json
    - profile_extraction/profile_creation

  create_profiles_schwarzmarkt_d:
    cmd: poetry run create_profiles --model transformer_model/best-model.pt --chat data/raw/schwarzmarkt_d.json --output profiles/schwarzmarkt_d.json
    outs:
    - profiles/schwarzmarkt_d.json
    deps:
    - transformer_model/best-model.pt
    - data/raw/schwarzmarkt_d.json
    - profile_extraction/profile_creation

  create_profiles_schwarzmarkt_legacy:
    cmd: poetry run create_profiles --model transformer_model/best-model.pt --chat data/raw/schwarzmarkt_legacy.json --output profiles/schwarzmarkt_legacy.json
    outs:
    - profiles/schwarzmarkt_legacy.json
    deps:
    - transformer_model/best-model.pt
    - data/raw/schwarzmarkt_legacy.json
    - profile_extraction/profile_creation

  create_profiles_safe_port:
    cmd: poetry run create_profiles --model transformer_model/best-model.pt --chat data/raw/schwarzmarkt_safe_port.json --output profiles/schwarzmarkt_safe_port.json
    outs:
    - profiles/schwarzmarkt_safe_port.json
    deps:
    - transformer_model/best-model.pt
    - data/raw/schwarzmarkt_safe_port.json
    - profile_extraction/profile_creation

  visualize_profiles_schwarzmarkt_d:
    cmd: poetry run visualize_profiles --input-json profiles/schwarzmarkt_d.json --output-dir visualized_profiles/schwarzmarkt_d/ --model-path transformer_model/best-model.pt
    outs:
    - visualized_profiles/schwarzmarkt_d/
    deps:
    - profile_extraction/profile_visualization/
    - profiles/schwarzmarkt_d.json
    - transformer_model/best-model.pt

  visualize_profiles_schwarzmarkt_4:
    cmd: poetry run visualize_profiles --input-json profiles/schwarzmarkt_4.json --output-dir visualized_profiles/schwarzmarkt_4/ --model-path transformer_model/best-model.pt
    outs:
    - visualized_profiles/schwarzmarkt_4/
    deps:
    - profile_extraction/profile_visualization/
    - profiles/schwarzmarkt_4.json
    - transformer_model/best-model.pt

  visualize_profiles_schwarzmarkt_legacy:
    cmd: poetry run visualize_profiles --input-json profiles/schwarzmarkt_legacy.json --output-dir visualized_profiles/schwarzmarkt_legacy/ --model-path transformer_model/best-model.pt
    outs:
    - visualized_profiles/schwarzmarkt_legacy/
    deps:
    - profile_extraction/profile_visualization/
    - profiles/schwarzmarkt_legacy.json
    - transformer_model/best-model.pt

  visualize_profiles_schwarzmarkt_safe_port:
    cmd: poetry run visualize_profiles --input-json profiles/schwarzmarkt_safe_port.json --output-dir visualized_profiles/schwarzmarkt_safe_port/ --model-path transformer_model/best-model.pt
    outs:
    - visualized_profiles/schwarzmarkt_safe_port/
    deps:
    - profile_extraction/profile_visualization/
    - profiles/schwarzmarkt_safe_port.json
    - transformer_model/best-model.pt

  cluster:
    foreach:
    - chat: schwarzmarkt_4
      model: transformer_model
      threshold: 0.3
      tf-idf: tf-idf
      embeddings: model/best-model.pt
      embeddings-type: MODEL
      output: cluster/hybrid-embedded

    - chat: schwarzmarkt_4
      model: transformer_model
      threshold: 0.3
      tf-idf: no-tf-idf
      embeddings: model/best-model.pt
      embeddings-type: MODEL
      output: cluster/hybrid-no-tf-embedded

    do:
      cmd: poetry run cluster_profiles --linkage average --model-path ${item.model}/best-model.pt --output-dir ${item.output} --profile-path profiles/${item.chat}.json --threshold ${item.threshold} --visualizations-path visualized_profiles/${item.chat} --${item.tf-idf} --embeddings "${item.embeddings}" --embeddings-type "${item.embeddings-type}"
      deps:
      - profile_extraction/profile_clustering
      - visualized_profiles/${item.chat}/
      - profiles/${item.chat}.json
      - ${item.model}
      outs:
      - ${item.output}

  cluster_tf_idf:
    cmd: poetry run cluster_tfidf --profiles-path "profiles/schwarzmarkt_4.json" --visualizations-path "visualized_profiles/schwarzmarkt_4" --output-path "cluster/only-tf-idf" --threshold 0.3
    deps:
    - profile_extraction/profile_clustering
    - visualized_profiles/schwarzmarkt_4/
    - profiles/schwarzmarkt_4.json
    outs:
    - cluster/only-tf-idf


  embedding_evaluation:
    foreach:
      classic_model_embeddings:
        embeddings-type: MODEL
        embeddings: model/best-model.pt
      transformer_model_embeddings:
        embeddings-type: MODEL
        embeddings: transformer_model/best-model.pt
      gbert_large_embeddings:
        embeddings-type: TRANSFORMER
        embeddings: deepset/gbert-large
    do:
      cmd: poetry run evaluate_embeddings --embeddings-type "${item.embeddings-type}" --plot-affinity "evaluation/${key}.pdf" --plot-differences "evaluation/${key}-differences.pdf" --embeddings "${item.embeddings}" data/evaluation "evaluation/${key}-affinity.csv" "evaluation/${key}-affinity-differences.csv"
      deps:
      - data/evaluation
      - model/
      - transformer_model/
      - language_model/
      - profile_extraction/evaluation
      outs:
      - evaluation/${key}-affinity.csv
      - evaluation/${key}-affinity-differences.csv
      - evaluation/${key}.pdf
      - evaluation/${key}-differences.pdf

  evaluate_nearest_neighbour:
    cmd: poetry run evaluate_nn --dataset data/prod_price_relations.jsonl > nearest_neighbour_metrics.json
    deps:
    - data/prod_price_relations.jsonl
    - profile_extraction/evaluation/evaluate_nn_algorithm.py
    metrics:
    - nearest_neighbour_metrics.json
